[
    {
      "id": "20e4095c-05b4-4793-b1d2-dae85ac96ac9",
      "title": "What is CORS?",
      "slug": "what-is-cors",
      "postBody": "Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTPheaders to tell a browser to let a web application running at one origin (domain) have permission to access selected resources from a server at a different origin. A web application makes a <strong>cross-origin HTTP request</strong> when it requests a resource that has a different origin (domain, protocol, and port) than its own origin. <br/><br/> An example of a cross-origin request: The frontend JavaScript code for a web application served from http://domain-a.com uses XMLHttpRequest to make a request for http://api.domain-b.com/data.json.",
      "postCategory": "Backend",
      "author": "Hasibul Hasan",
      "readTime": 1,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Fcors-details.jpg?alt=media&token=500ca290-ff6e-437f-8591-af91235ab135",
      "publishDate": "27-Oct-2022"
    },
    {
      "id": "85022e91-138f-4ec7-9244-2e51de5ca907",
      "title": "Why are you using firebase? What other options do you have to implement authentication?",
      "slug": "why-are-you-using-firebase-firebase-auth-system",
      "postBody": "At this point I'm using firebase for authentication & hosting purpose only. It has many more features that we can use such as storage, messaging, realtime database and so on. Besides Firebase tehre are some providers that can help us to building authentication system more easy and powerfull such as oAuth. oAuth is popular provider for this auth system.",
      "postCategory": "Authentication",
      "author": "Hasibul Hasan",
      "readTime": 2,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Fauth.jpg?alt=media&token=f736390e-a419-45ae-8717-ba2f04b53a50",
      "publishDate": "27-Oct-2022"
    },
    {
      "id": "20d976a8-85a5-450f-a916-292fc66c7259",
      "title": "How does the private route work?",
      "slug": "how-does-the-private-route-work",
      "postBody": "The private route component is used to protect selected pages in a React app from unauthenticated users. It's receive the protected component as a children then check if the user logged in or not. If there is any user logged in it return the protected component to the user. Otherwise it won't. That's how it works!",
      "postCategory": "React Router",
      "author": "Hasibul Hasan",
      "readTime": 2,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Fprotected-router.jpg?alt=media&token=e15c3296-5755-4a20-a3fd-f75c51eecbf2",
      "publishDate": "27-Oct-2022"
    },
    {
      "id": "a19b5e23-654d-46b9-8ab0-9f959d756cfd",
      "title": "What is Node? How does Node work?",
      "slug": "what-is-node-how-does-node-work",
      "postBody": "Node.js is an open-source, cross-platform JavaScript runtime environment and library for running web applications outside the client's browser. Ryan Dahl developed it in 2009, and its latest iteration, version 15.14, was released in April 2021. Developers use Node.js to create server-side web applications, and it is perfect for data-intensive applications since it uses an asynchronous, event-driven model. <br/> <br/> First of all just like other languages node comes with packages and modules. These are libraries of functions that we can import from npm (node package manager) into our code and utilize. If you have node installed on your computer, then you already have some basic modules installed. These are how we create a simple server, but I’ll get to that later.<br><br/>If you are familiar with JavaScript, then you know it is asynchronous and single threaded. The single thread is the event loop which is responsible for running all functions and requests. The asynchronous behavior is extremely important when using node, because it guarantees that the event loop is never blocked by a synchronous function.<br/><br/>Even though there is only one event loop, when a request is made the loop passes the request to an asynchronous function which does the work. When this function is done and a response is returned, it can then be passed back to the event loop to be executed by the callback and sent to the user. If the functions were synchronous then the event loop would get locked up with one clients request and response, and all other clients would have to wait till that client was done. Because of the the asynchronous nature of JavaScript, the applications using node can handle many requests happening at the same time. This means that when programming in Node.js it is important to always keep in mind that the functions being written are not synchronous. It is also very important to catch errors on the server before it is passed back to the client. This prevents any errors from getting to the event loop which could crash the program and all clients would suffer.",
      "postCategory": "Node JS",
      "author": "Hasibul Hasan",
      "readTime": 5,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Fnodejs.jpg?alt=media&token=77034ea4-0062-4763-b896-0c0d5a640d63",
      "publishDate": "27-Oct-2022"
    },
    {
      "id": "9aa2757f-1716-4af0-9910-44c35665e727",
      "title": "What is the purpose of React Router?",
      "slug": "what-is-the-purpose-of-react-router",
      "postBody": "Those who need a client-side router, need it for state management. Say you have server-rendered pages, but with some client-side widgets - e.g. a calendar, set of filters or collapsed or open sidebar. Router helps you initialize these components of the page in the exact state you want them. Granted, you could do most of it and all of the use cases I've named on the server, too. But it's usually a lot easier to handle these on the client. You might render it faster on the server, but sometimes, especially when doing partial page updates, it's cheaper and faster to handle that client-side.",
      "postCategory": "React Router",
      "author": "Hasibul Hasan",
      "readTime": 1,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Freact%20router.jpg?alt=media&token=65f90262-b30c-4b3f-9099-1b7b85815000",
      "publishDate": "11-Oct-2022"
    },
    {
      "id": "512e7316-7338-4095-b7a6-152883865bee",
      "title": "How React Context API Works?",
      "slug": "how-react-context-api-works",
      "postBody": "Context is designed to share data that can be considered “global” for a tree of React Components. It sits next to React to props and state. In other words, Context provides a way to pass data through the component tree without having to pass props down manually at every level. In a short word I can say that, React Context provides a way to pass data through the component tree without having to pass props down manually at every level. In some sense, it simulates “Global” data in React component Tree.",
      "postCategory": "React Hook",
      "author": "Hasibul Hasan",
      "readTime": 3,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Fcontextapi.jpg?alt=media&token=607290cc-9616-4d9a-8d16-fb9bcfd21723",
      "publishDate": "11-Oct-2022"
    },
    {
      "id": "129b6a44-35c6-4ed1-9b4f-b71ccca16228",
      "title": "What is React useRef() and How does it works?",
      "slug": "react-useref-and-how-does-it-works",
      "postBody": "The useRef hook may not be as popular as other hooks such as useState, useEffect and useReducer. Due to this, it may not be clear what is the purpose of this hook. Nonetheless, useRef hook can be very useful in certain situations. The ref, in useRef, is a shorthand for “reference”. What this hook does is it allows you to store data, and persist them across renders. What's even more interesting and important, this hook does this without causing the component to re-render. This means that when you update the value stored by useRef, React will not re-render your component. The most common use case for the useRef hook is to store references to DOM nodes and React components. This then allows you to access these nodes directly and work with them as you need. This is similar to using JavaScript querySelector() method to find DOM node and storing the node in a variable.",
      "postCategory": "React Hook",
      "author": "Hasibul Hasan",
      "readTime": 3,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2FuseRef%20hook.jpg?alt=media&token=08303872-510e-43c5-9f32-7b6526259304",
      "publishDate": "11-Oct-2022"
    },
    {
      "id": "84f040fd-4df0-49c8-a12e-ae2ce88b38dc",
      "title": "LocalStorage, useState (), useEffect() এর ছোট্ট গল্প",
      "slug": "localstorage-useeffect-usestate-short-stories",
      "postBody": "আমদের অনেকেরই লোকাল স্টোরেজ, useState (), useEffect() এগুলো নিয়ে প্রশ্ন! একদম সহজ ভাবে চিন্তা করলে আমার মনে হয় এই সমস্যা গুলো হবে না।  আমি তেমন জানাশোনা মানুষ নই, তাই আমার ভুল হতেই পারে এবং এটিই স্বাভাবিক। আমি শুধু আমার পার্সপেক্টিভ থেকে বোঝানোর চেষ্টা করছি। ভুল হলে ধরিয়ে দিবেন আশা করছি। চলুন একসাথে চিন্তা করি, কিছুক্ষণের জন্য ভুলে যান আপনি মাইলস্টোন ৮ করেছেন অর্থাৎ আপনি ভুলে যান যে আপনি react জানেন। এখন তাহলে আমরা react কি জিনিস সেটা জানি না। Pure JavaScript আমরা জানি এবং pure JavaScript এ আমরা অনেক ব্রডলি ভাবে localstorage ব্যাবহার করেছিলাম. মনে পড়ছে কি? যদি না মনে পরে তাহলে আগের মাইলস্টোন টা নিয়ে একটু চিন্তা করুন। আমরা একটা ফাংশন লিখতাম, যার মধ্যে localstorage এর কাজ করতাম। এবং সেই ফাংশন টাকে আমরা বিভিন্ন onclick হ্যান্ডেলার এর সাথে যুক্ত করে কাজ করতাম। তাই নয় কি? এটুকু পর্যন্ত বুঝতে পেরেছেন কিনা দেখুন তো একবার। যদি আপনার উত্তর হ্যা হয় তাহলে পরের অংশ পড়ুন, আর উত্তর না হলে আবার একটু এই অংশটুকু পড়ুন তাও না হলে আগের মাইলস্টোন এর কোড গুলো একটু দেখুন। আগের মাইলস্টোন বলতে শুধু 7 নয়, অন্যগুলো (যেগুলো localstorage ছিল) ওকে, তাহলে এই অংশে যেহেতু এসেই পড়েছেন তার অর্থ আপনি আগের অংশটুকু বুঝতে পেরেছেন। অর্থাৎ ভ্যানিলা জাভাস্ক্রিপ্ট এ আপনার লোকাল স্টোরেজ নিয়ে কোনো সমস্যা নেই।  এবার তাহলে চলুন আমরা react এ ঢুকি। React এর কিছুই জানি না তেমন আমরা (ধরে নিন)। শুধু জানি কিভাবে ডাটা এক কম্পোনেন্ট থেকে অন্য কম্পোনেন্টে পাঠাতে হয় এবং কিভাবে আগের কম্পোনেন্ট থেকে পাঠানো ডাটা রিসিভ করতে হয়। এটুকু তো আমরা জানি নাকি? যদি এটুকুও না জেনে থাকি তবে একদম শুরুর দিকের ভিডিও দেখতে উৎসাহিত করছি।  এরপর পরের অংশ পড়ুন। তাহলে আমরা জানি যে কিভাবে ডাটা পাঠাতে হয় এবং সেটাকে রিসিভ করতে হয় (props). এইযে ডাটা পাঠানোর যেই ব্যাপার সেখানে কিন্তু আমরা যেকোনো ডাটা পাঠাতে পারি। যেমন ধরুন স্ট্রিং, নম্বর, বুলিয়ান, অ্যারে, অবজেক্ট এমন কি ফাংশন কেউ। তাহলে আমরা এখন পর্যন্ত বুঝতে পারলাম props এর মাধ্যমে যেকোনো ডাটা পাঠানো যায় অন্য কম্পোনেন্টের মধ্যে। তাহলে এবার আরেকটু সহজ করে একদম শুরুর অংশে আমরা যে ভ্যানিলা JavaScript এর মধ্যে ফাংশন লিখতাম localstorage এর জন্য সেই ফাংশন তাই যদি আমরা মাদার কম্পোনেন্টের (যেই কম্পোনেন্ট থেকে ডাটা পাঠাবো) মধ্যে লিখে ফেলি এবং এই ফাংশন কে props এর মাধ্যমে child কম্পোনেন্ট এ পাঠিয়ে দেই তাহলেই কিন্তু আমরা আগের মত করে onclick এর মধ্যে এই ফাংশন কে হ্যান্ডেলার হিসেবে ব্যাবহার করতে পারছি। বুঝতে পারেন নি তাই তো? ভ্যানিলা JavaScript এ আমরা একটি onclick হ্যান্ডেলার ব্যাবহার করতাম না? হোক সেটা বাটন অথবা যেকোনো এলিমেন্ট। সেই একই ভাবে child কম্পোনেন্ট এর মধ্যেও আমরা সেটাই করবো। শুধু ফাংশন টা থাকবে মাদার কম্পোনেন্ট এর মধ্যে। যেটা আমরা child কম্পোনেন্ট এর মধ্যে props থেকে পাবো। এইতো হয়ে গেলো আপনার হ্যান্ডেলার ব্যাবহারের কাজ। এই পর্যন্ত যদি বুঝে থাকেন তাহলে পরের অংশ পড়ুন, না বুঝলে এই অংশটি আবার পড়ার চেষ্টা করুন। তবুও না বুঝলে কোন জিনিসটি বোঝা যায়নি জানান। উপরের অংশ বুঝে গেছেন জন্যই এই অংশ তে এসেছেন। তাহেল চলুন এবার আমরা আরেকটু ডিপে যাই। উপরের অংশ যদি আপনি সত্যিই বুঝে থাকেন তাহলে আপনি কিন্তু খুব সহজেই লোকাল স্টোরেজ এর মধ্যে LocalStorage.setItem() এর মাধ্যমে ডাটা রাখতে পারবেন এখন। এবার তাহলে চলুন একটু useState()  নিয়ে ধারণা নেয়া যাক। State অর্থ হচ্ছে 'অবস্থা'। কোনো কিছুর অবস্থা বোঝাতে আমরা এটা ব্যাবহার করবো। এটি একটু কঠিন ভাষা হয়ে গেলো। আরেকটু সহজ ভাবে ভাবা যাক। ধরুন, আপনি গাছ পছন্দ করেন। আপনার রুমের মধ্যে গাছ আছে অনেকগুলো (কতগুলো?)। এখন এই গাছের সংখ্যা (গাছ কেমন আছে সেটাও হতে পারে তবে সেটা পরে বলছি) আপনার মনে থাকে না। তাই আপনি একটি জায়গায় লিখে রাখলেন যে আপনার গাছ আছে ১০ টি (ইনিশিয়াল ভ্যালু)। এখন তাহলে কিন্তু আপনার গাছের অবস্থা (এই ক্ষেত্রে নাম্বার) বলতে পারবেন। সেটা হচ্ছে ১০। এবার ধরুন আপনি গেলেন বাইরে ঘুরতে। রাস্তার পাশে ৩ টি গাছ দেখে আপনার ভালো লেগে গেলো কিনে নিয়ে এলেন বাসায়। বাসায় অন্যগাছ গুলোর সঙ্গে এগুলোও রেখে দিলেন তাহলে আপনার গাছের বর্তমান অবস্থা কি? আগের ১০ এবং নতুন ৩। অর্থাৎ গাছের বর্তমান অবস্থা হচ্ছে ১০+৩=১৩ (ইনিশিয়াল ভ্যালু + নতুন ভ্যালু)। এই উদাহরণ এর মাধ্যমে state বুঝি এবার। আগে একটি state লিখি নেই আমরা। const [trees, setTrees] = useState(10); উপরের state টা না বুঝলেও সমস্যা নেই। তবে এটুকু আমাদের ধারণা আছে যে কিভাবে এটি ডিক্লেয়ার করতে হয়। তো উদাহরণ এ আমাদের ইনিশিয়াল ভ্যালু কত ছিল? অর্থাৎ আমাদের সেই রুমে গাছের সংখ্যা কত ছিল? ১০ তাই না?  যেহেতু আমরা গাছ গণনা শুরু করেছি ১০ টা থাকা অবস্থায় (স্টেট অর্থ অবস্থা) তাই আমরা আমাদের ইনিশিয়াল ভ্যালু ১০ বতলেছি। যেটা আমরা useState(10) এর পেটের মধ্যে দিয়ে দিসি। এখানে দিয়ে দেয়ার অর্থ হচ্ছে বাম পাশে আমাদের যেই trees নামের ভ্যারিয়েবল (বলা যায়) সেটার মান বসিয়ে দিলাম ১০। এটুকু বুঝে ফেললাম আমরা। তাহলে এবার পরের ঘটনা টা দেখি। নতুন ৩ টি গাছ কিনে এনে রুমে রাখায় আমাদের গাছের অবস্থা (state) পরিবর্তন হয়েছে। অর্থাৎ 10+3= 13 হয়েছে।  তাহলে এটাও তো আমদের সেই কাগজে লিখতে হবে সেই জন্য আমরা trees কে নতুন ভ্যালু দিবো। এই জন্য আমরা কল করে থাকি setTrees কে, যে তোমার অবস্থা পরিবর্তন হয়েছে। এবং সেটি এরকম setTrees(trees + newValue) অর্থাৎ setTrees(10 + 3); এটুকু যদি বুঝতে পারি তাহলে আশা করছি useState() পুরোটাই বুঝে ফেলেছি আমরা। তবুও কোথাও না বুঝলে বলবেন। এবার আসি  useEffect()। useEffect() সাধারণ ভাবে আমরা ব্যাবহার করি এমন কোনো কাজ করতে যেটি আমাদের কোডের মধ্যে নেই। যেমন: api, localstorage ডাটা ইত্যাদি। (কোডের মধ্যেও এর ব্যাবহার রয়েছে, যেমনঃ রিরেন্ডারিং, ডম আপডেট ইত্যাদি) আমাদের ঘরের মধ্যে ছিল না তাই না? (অর্থাৎ কোডের মধ্যে নেই) তাহলে এইযে বাইরে থেকে 3টা গাছ নিয়ে আসতে কাউকে তো সেখানে যেতে হয়েছে সেই মানুষ টাই হচ্ছে useEffect()। এবং এইযে গাছ গুলো আনার পর খাতায় নতুন অবস্থা (state) লিখে রাখলাম অর্থাৎ নতুন সংখ্যা কে যেটা আমরা সেই মানুষের মাধ্যমে এনেছি (useEffect) সেই সংখ্যা কে আমাদের আগের সংখ্যার জায়গায় রাখলাম setTrees দিয়ে (useEffect করেছেন তাই এটি useEffect এর নিজের কাজ)। এইতো তাহলে সেই গাছ আনার মানুষের কিন্তু কাজ শেষ। অর্থাৎ useEffect() এবার ক্লোজ হতে পারে! আর আমাদের বোঝাও কিন্তু  শেষ। আমরাও তাহলে ক্লোজ হতে পারি। যেহেতু আমি নতুন এবং তেমন ভালো জ্ঞান নেই তাই আমার লেখা এবং কনসেপ্ট এর মধ্যে ভুল থাকা টা সাভাবিক। এমন কোনো ভুল আপনার চোখে পড়লে ধরিয়ে দিবেন আশা করছি। এত সময় নিয়ে কষ্ট করে পড়ার জন্য আপনাকে অসংখ্য ধন্যবাদ। আপনার উপকারে আসতে পারলেই আমাদের সকলের মঙ্গল। দোয়া রাখবেন। আল্লাহ হাফেজ ❤️",
      "postCategory": "React Hook",
      "author": "Hasibul Hasan",
      "readTime": 10,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Fhooks.jpg?alt=media&token=7f3a01d6-de9f-4c4c-921d-dd838ef9ff4f",
      "publishDate": "11-Oct-2022"
    },
    {
      "id": "967a7caf-a15c-40ba-b829-3539ecbcf5ab",
      "title": "useEffect() ডিপেন্ডেন্সি নিয়ে মাথা ঘুরাচ্ছে?",
      "slug": "know-about-useeffect-dependency",
      "postBody": "আমাদের যাদের useEffect() dependency নিয়ে সমস্যা আছে আজকে চলুন একটু অন্যভাবে এই জিনিসটা নিয়ে ভাবার চেষ্টা করি। প্রথমেই বলে রাখি যেহেতু আমিও নতুন তাই আমার লেখায় এবং আমার কনসেপ্ট এ ভুল থাকাটাই স্বাভাবিক। তাই কোন ভুল চখে পরলে আমাকে ধরিয়ে দিবেন। USEEFFECT() - ৩ রকম ভাবে ডিক্লেয়ার করা যায়। প্রথমতঃ কোন ডিপেন্ডেন্সি না দিয়ে দ্বিতীয়তঃ ডিপেন্ডেন্সি ব্লাঙ্ক রেখে অর্থাৎ ব্ল্যাঙ্ক অ্যারে অথবা ফাঁকা অ্যারে দিয়ে এবং তৃতীয়তঃ ডিপেন্ডেন্সি দিয়ে। এগুলো এখন না বুঝলেও চলবে, কিছুক্ষণের মধ্যে এগুলো নিয়ে আবার বলা হবে. এবার চলুন একটি ঘটনা দিয়ে শুরু করা যাক। প্রথম ঘটনা: মনে করুন আপনার বাড়িটি একটি ডিজিটাল বাড়ি। যেখানে আপনার সবকিছু রিমোট কন্ট্রোল, ভয়েস কন্ট্রোল এমন আর কি। এই বাসাতে একটি স্পিকার সেট করা আছে। যে স্পিকারটার কাজ হচ্ছে বাসার মধ্যে যে কোন কিছুর পরিবর্তন ঘটলে অর্থাৎ যেকোনো কিছুর অবস্থান পরিবর্তন ঘটলে এই স্পিকারটা বলে 'Done ✅'। এখন এই পরিবর্তনটা হতে পারে: কেউ রুমে ঢুকলো, হতে পারে কেউ বাইরে চলে গেল, হতে পারে কোন একটা গাছ উপর থেকে পড়ে গেল, হতে পারে কোন একটা বিড়াল দৌড় দিল। এক কথায় আপনার বাসার মধ্যে যদি কোন চেঞ্জ হয় বা পরিবর্তন ঘটে অথবা কোনো কিছুর অবস্থার (state) পরিবর্তন ঘটে তাহলে সেই স্পিকারটা বলে 'Done ✅'। এবার এই ঘটনাটা উপলব্ধি করে আমরা প্রথম ব্যাপারটাকে বোঝার চেষ্টা করি। প্রথম ঘটনায় স্পিকারটার 'Done ✅' বলা কোন ইন্ডিভিজুয়াল কাজের উপর নির্ভর করছে না। এটি সমগ্র বাসার মধ্যে যে কোন কোন চেঞ্জের উপর ডিপেন্ড করছে অর্থাৎ যে কোন কিছুর অবস্থা পরিবর্তন হলেই এটি বলবে 'Done ✅', কোন ইন্ডিভিজুয়াল জিনিসের উপর ডিপেন্ড করবে না। এরকম যদি কোনো ঘটনা আমাদের কোডের মধ্যে হয়ে থাকে। অর্থাৎ আমাদের কোডের মধ্যে যেকোনো পরিবর্তন বা অবস্থার পরিবর্তন ঘটলেই আমাদের কোন একটি ফাংশনকে (useEffect এর অ্যানোনিমাস ফাংশন) রান করার প্রয়োজন প্রয়োজন হয় তাহলে সেই ক্ষেত্রে আমাদের কোনো ডিপেন্ডেন্সি থাকবে না। অর্থাৎ কোনো ইন্ডিভিজুয়াল জিনিসের উপর ডিপেন্ড করবে না। সেই ক্ষেত্রে আমরা কোনো ডিপেন্ডেন্সি দিবো না। কোড টা হবে এরকম। useEffect(()=> {console.log('Done ✅'):}); (Dependency Parameter থাকবে না)। দ্বিতীয় ঘটনা: ধরুন আপনার ক্লাসের মধ্যে ৬০ জন শিক্ষার্থী রয়েছে। আপনি একটি অনুষ্ঠান করার জন্য সকলের ডাটা চাইলেন। ৬০ জন মানুষই তাদের ডাটা একটি ফরম এর মধ্যে ফিলাপ করে রেখে দিল। এখন আপনি আছেন এক জায়গায় ওই ডাটা গুলা রয়েছে অন্য জায়গায়। তাহলে এই ডেটা গুলো তো আপনাকে আনতে হবে। এর জন্য আপনি একজনকে পাঠিয়ে দিলেন যে যেটা গুলো নিয়ে আসো। আপনি যেই মানুষটাকে পাঠালেন, সে কি করল একেবারে ৬০ জনের ডাটা ফর্মটা নিয়ে আপনার কাছে এসে দিয়ে দিল। তাহলে সেই লোকের কাজ শেষ। সেই লোক চলে গেল। এখন যেহেতু ষাট জনের ডাটাই আপনি পেয়ে গিয়েছেন তাই সেই ডেটা যে এনে দিল সেই লোকের কিন্তু আপনার আর দরকার নাই অর্থাৎ সেই লোককে আপনার একবারই প্রয়োজন হয়েছে। উপরের এই ঘটনার মতো যদি আমাদের কোডের মধ্যেও এমন কোনো কাজ করানোর প্রয়োজন পরে যেটা আমাদের একবারই দরকার হবে। যেমন কোন এপিআই থেকে ডেটা লোড করা। এপিআই থেকে ডাটা লোড করার পরে আমার কিন্তু আর ডাটা লোড করার প্রয়োজন নেই কারণ আমি ইতিমধ্যে সব ডাটা পেয়ে গেছি। সেই ক্ষেত্রে আমরা useEffect() এর 2nd Parameter হিসেবে একটি ব্লাঙ্ক অ্যারে দিব। যেটার অর্থ হচ্ছে এটি একবার রান হবে। কোড টি দেখতে নিচের মত হবে: useEffect(()=> {console.log('Welcome to our website 💜'):}, []); (Dependency Parameter হিসেবে [] থাকবে)। তৃতীয় ঘটনা: আপনার সেই ডিজিটাল বাসায় একটি লাইট আছে। সেই লাইটটি তখনই জ্বলে যখন রুমের মধ্যে কোন একটি মানুষ প্রবেশ করে। মানুষ প্রবেশ না করলে কিন্তু সেই লাইটটি জ্বলে না। অর্থাৎ এই ক্ষেত্রে লাইট টি জ্বলার সঙ্গে একটি সম্পর্ক রয়েছে রুমের মধ্যে মানুষ ঢোকার। লাইটটি কেবলমাত্র তখনই জ্বলবে যখন রুমের মধ্যে মানুষ ঢুকবে। উপরের এই ঘটনার মতো যদি আমাদের কোডের মধ্যেও এরকম কোন কিছুর দরকার হয়, যে কোন একটা ইন্ডিভিজুয়াল (অথবা একাধিক) জিনিসের অবস্থার (state) পরিবর্তন হলেই শুধুমাত্র আমাদের একটি ফাংশন রান করবে। ই ক্ষেত্রে আমরা useEffect() এর 2nd Parameter হিসেবে একটি parameter অ্যারে এর মধ্যে দিব। ড টি দেখতে নিচের মত হবে: seEffect(() => {console.log('Human enter');}, [isManComing]); (Dependency Parameter হিসেবে [isManComing] থাকবে)। খুব সাজানো লেখা না এটা। একটু চেষ্টা করেছি মাত্র। ধন্যবাদ ❤",
      "postCategory": "React Hook",
      "author": "Hasibul Hasan",
      "readTime": 9,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Freact-useeffect-hook.jpg?alt=media&token=882a3728-7675-4bc1-928e-631f4497f1ee",
      "publishDate": "11-Oct-2022"
    },
    {
      "id": "bd7eb96e-0d3d-4900-af76-63af104fa559",
      "title": "useState() কোথায় ডিক্লেয়ার করবো?",
      "slug": "where-should-i-declare-usestate",
      "postBody": "আপনার যদি useState() কোথায় ডিক্লেয়ার করবো বুঝতে সমস্যা হয় তাহলে নিচের প্রসেস টা ভাবতে/করতে পারেন। আপনার কম্পোনেন্ট গুলো একটি খাতায় ডায়াগ্রাম দিয়ে ম্যাপ বানান অর্থাৎ প্রথমে কোন কম্পোনেন্ট আছে এরপর কোনটা মানে একটা রোড ম্যাপ এর মত। এরপর চিন্তা করুন আপনি কোন কম্পোনেন্ট থেকে ডাটা কোথায় পাঠাতে চাচ্ছেন। তাহলে 2টার মাদার কম্পোনেন্ট কে তখন ধরুন এই কাজ করতে useState() আমরা কখন ব্যাবহার করি? যখন আমাদের একটি ডাটা সংরক্ষণ এর প্রয়োজন পড়ে তখন। সেটি যেকোনো ডাটা হতে পারে, যেমন: বুলিয়ান, নাম্বার, স্ট্রিং, অ্যারে, অবজেক্ট ইত্যাদি। এটি ব্যবহারের মাধ্যমে আমরা আমাদের কোড অনেক ছোট এবং পাওয়ারফুল করে ফেলতে পারতেছি। অন্যদিকে useEffect() আমরা ব্যাবহার করি বাইরের কোনো কাজ করতে (যেটা আপনার কোড এর মধ্যে নেই। যেমন: লোকাল স্টোরেজ, api)। এটি মাধ্যমে আমরা যখন কোনো ডাটা লোড করি তখন সেই ডাটা কে স্টোর করতে আবার আমরা useState() ব্যাবহার করি সেটা স্টোর করতে। ধন্যবাদ 💜",
      "postCategory": "React Hook",
      "author": "Hasibul Hasan",
      "readTime": 4,
      "image": "https://firebasestorage.googleapis.com/v0/b/pshrd-d7d9f.appspot.com/o/shikkhanirServerWeb%2FblogThumb%2Fusestate.jpg?alt=media&token=d5f28f4c-aa80-4a89-b3c3-2ada9f79ae10",
      "publishDate": "11-Oct-2022"
    }
  ]